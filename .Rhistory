library(readxl)
data2 <- read_xlsx("./Satisfaction Survey(2).xlsx")
data <- read_xlsx("./Satisfaction Survey(2).xlsx")
str(data)
summary(data)
head(data)
rm(data2)
tail(data)
View(data)
gregexpr(",", "Madison, Wisconsin")
sapply(strsplit(data$`Orgin City`[1:5], ","))
strsplit(data$`Orgin City`[1:5], ",")
strsplit(data$`Orgin City`[1:5], ",")[1]
sapply(strsplit(data$`Orgin City`[1:5], ","), '[',1)
data$OriginCity <- sapply(strsplit(data$`Orgin City`[1:5], ","), '[',1)
data$OriginCity <- sapply(strsplit(data$`Orgin City`, ","), '[',1)
data$DestinationCity <- sapply(strsplit(data$`Destination City`, ","), '[',1)
View(data)
is.na(data)
sum(is.na(data))
sapply(data, function(x), sum(is.na(x)))
sapply(data, function(x) sum(is.na(x)))
# Exploratory Data Analysis
library(tidyverse)
data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(,))))
data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na())))
data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))
data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.)))) %>%
transpose()
??geocode
library(ggmap)
paste(data$OriginCity, ", ", data$`Origin State`)
geocode(paste(data$OriginCity, ",", data$`Origin State`))
paste(data$OriginCity, ",", data$`Origin State`)
paste(data$OriginCity, ", ", data$`Origin State`, sep="")
geocode(paste(data$OriginCity, ",", data$`Origin State`))
?register_google
register_google(key="AIzaSyDxtdj2XlQl5jctuvMPCUO2eUQPncQxO4Y", write=TRUE)
geocode("Dallas/Fort Worth, Texas")
OriginLatLon <- geocode(paste(data$OriginCity, ", ", data$`Origin State`, sep=""))
class(paste(data$OriginCity, ", ", data$`Origin State`, sep=""))
type(paste(data$OriginCity, ", ", data$`Origin State`, sep=""))
is.list(paste(data$OriginCity, ", ", data$`Origin State`, sep=""))
is.vector(paste(data$OriginCity, ", ", data$`Origin State`, sep=""))
?unique
unqOrigins <- paste(data$OriginCity, ", ", data$`Origin State`, sep="")
unqOrigins <- unique(paste(data$OriginCity, ", ", data$`Origin State`, sep=""))
unqDests <- unique(paste(data$DestinationCity, ", ", data$`Destination State`, sep=""))
OriginLatLon <- geocode(unqOrigins)
tail(OriginLatLon)
sapply(OriginLatLon, function(x) sum(is.na(x)))
DestLatLon <- gecode(unqDests)
OriginLatLon[is.na(OriginLatLon$lon),]
geocode("Guam")
guam <- geocode("Guam")
OriginLatLon$lon <- ifelse(is.na(OriginLatLon$lon), guam$lon, OriginLatLon$lon)
OriginLatLon$lat <- ifelse(is.na(OriginLatLon$lat), guam$lat, OriginLatLon$lat)
sapply(OriginLatLon, function(x) sum(is.na(x)))
colnames(OriginLatLon)
colnames(OriginLatLon) <- c("Orig_lon", "Orig_lat")
View(OriginLatLon)
DestLatLon <- gecode(unqDests)
DestLatLon <- geocode(unqDests)
sapply(DestLatLon, function(x) sum(is.na(x)))
DestLatLon$lon <- ifelse(is.na(DestLatLon$lon), guam$lon, DestLatLon$lon)
DestLatLon$lat <- ifelse(is.na(DestLatLon$lat), guam$lat, DestLatLon$lat)
sapply(DestLatLon, function(x) sum(is.na(x)))
write.csv(OrigLatLon, file="./OrigLatLon.csv")
write.csv(OriginLatLon, file="./OrigLatLon.csv")
write.csv(DestLatLon, file="./DestLatLon.csv")
colnames(DestLatLon) <- c("Dest_lon", "Dest_lat")
View(DestLatLon)
write.csv(DestLatLon, file="./DestLatLon.csv")
?MAPPLY
?mapply
?map
?cbind
cbind(OriginLatLon, unqOrigins)
OriginLatLon <- cbind(OriginLatLon, unqOrigins)
DestLatLon <- cbind(DestLatLon, unqDests)
# write the lat and lons of the locations so we do not need to make API calls again
write.csv(OriginLatLon, file="./OrigLatLon.csv")
write.csv(DestLatLon, file="./DestLatLon.csv")
# Get the unique Origins and Destinations to limit API calls to geocode
data$OriginCityState <- paste(data$OriginCity, ", ", data$`Origin State`, sep="")
data$DestCityState <- paste(data$DestinationCity, ", ", data$`Destination State`, sep="")
?merge
dim(merge(data, OriginLatLon, by=c(OriginCityState, unqOrigins), all.x=TRUE))
dim(merge(data, OriginLatLon, by=c(OriginCityState, unqOrigins), all.x=TRUE))
dim(merge(data, OriginLatLon, by=c("OriginCityState", "unqOrigins"), all.x=TRUE))
dim(merge(data, OriginLatLon, by.x="OriginCityState", by.y="unqOrigins", all.x=TRUE))
head(merge(data, OriginLatLon, by.x="OriginCityState", by.y="unqOrigins", all.x=TRUE))[,20:34]
# left join the data to bring in the Origin lat and lon
data <- merge(data, OriginLatLon, by.x="OriginCityState", by.y="unqOrigins", all.x=TRUE)
# left join the data to bring in the Destination lat and lon
data <- merge(data, DestLatLon, by.x="DestinationCityState", by.y="unqDests", all.x=TRUE)
# left join the data to bring in the Destination lat and lon
data <- merge(data, DestLatLon, by.x="DestCityState", by.y="unqDests", all.x=TRUE)
# Exploratory Data Analysis
library(tidyverse)
library(ggmap)
# use gdata to read in the .xls file of customer survey data
library(readxl)
data <- read_xlsx("./Satisfaction Survey(2).xlsx")
str(data)
data$OriginCity <- sapply(strsplit(data$`Orgin City`, ","), '[',1)
data$DestinationCity <- sapply(strsplit(data$`Destination City`, ","), '[',1)
unqDests <- unique(data$DestinationCity)
unqOrigins <- unique(data$OriginCity)
data$OriginCityState <- paste(data$OriginCity, ", ", data$`Origin State`, sep="")
data$DestinationCityState <- paste(data$DestinationCity, ", ", data$`Destination State`, sep=""
# Create a city state combination in the data to pass to the geocode function
data$OriginCityState <- paste(data$OriginCity, ", ", data$`Origin State`, sep="")
# Create a city state combination in the data to pass to the geocode function
data$OriginCityState <- paste(data$OriginCity, ", ", data$`Origin State`, sep="")
data$DestinationCityState <- paste(data$DestinationCity, ", ", data$`Destination State`, sep="")
# Get the unique Origin and destination cities to limit api calls to Google's geocode
unqOrigins <- unique(data$OriginCityState)
unqDests <- unique(data$DestinationCityState)
OriginLatLon <- read.csv("./OrigLatLon.csv")
DestLatLon <- read.csv("./DestLatLon.csv")
# left join the data to bring in the Origin lat and lon
data <- merge(data, OriginLatLon, by.x="OriginCityState", by.y="unqOrigins", all.x=TRUE)
# left join the data to bring in the Destination lat and lon
data <- merge(data, DestLatLon, by.x="DestCityState", by.y="unqDests", all.x=TRUE)
View(DestLatLon)
# left join the data to bring in the Destination lat and lon
data <- merge(data, DestLatLon, by.x="DestinationCityState", by.y="unqDests", all.x=TRUE)
View(data)
# Drop the indicies from the LatLon files
data = subset(data, select=-c("X.x", "X.y"))
# Drop the indicies from the LatLon files
data = subset(data, select=-c(`X.x`, `X.y`))
library(ggplot2)
library(maps)
library(rgeos)
library(maptools)
library(geosphere)
library(plyr)
install.packages("geosphere")
install.packages("geos")
library(ggplot2)
library(maps)
library(rgeos)
library(maptools)
library(geosphere)
library(plyr)
fortify.SpatialLinesDataFrame = function(model, data, ...){
ldply(model@lines, fortify)
}
# calculate routes for each row
routes = gcIntermediate(df[,c('lon1', 'lat1')], df[,c('lon2', 'lat2')], 200, breakAtDateLine = FALSE, addStartEnd = TRUE, sp=TRUE)
# fortify to dataframe
fortifiedroutes = fortify.SpatialLinesDataFrame(routes)
# get US map
usmap <- map_data("US")
View(data)
routes = gcIntermediate(data[,c('Orig_lon', 'Orig_lat')], data[,c('Dest_lon', 'Dest_lat')], 200, breakAtDateLine = FALSE, addStartEnd = TRUE, sp=TRUE)
# get US map
usmap <- map_data("United States")
# get US map
usmap <- map_data("USA")
# get US map
usmap <- map_data("usa")
# fortify to dataframe
fortifiedroutes <- fortify.SpatialLinesDataFrame(routes)
urbanareasin <- readShapePoly("ne_10m_urban_areas.shp")
urb <- c(geom_polygon(aes(long, lat, group = group),
size = 0.3,
color = "#ffffff",
fill = "#ffffff",
alpha = 1,
data = urbanareasin))
urbanareasin <- st_read("ne_10m_urban_areas.shp")
??sf::st_read
install.packages("rgdal")
library(rgdal)
urbanareasin <- readOGR("ne_10m_urban_areas.shp")
urbanareasin <- readOGR("ne_10m_urban_areas.shp")
urbanareasin <- readOGR("./ne_10m_urban_areas")
urbanareasin <- readOGR("./ne_10m_urban_areas.shp")
urbanareasin <- readOGR(dsn=path.expand("./ne_10m_urban_areas.shp"), layer = ne_10m_urban_areas)
urbanareasin <- readOGR(dsn=path.expand("./ne_10m_urban_areas"), layer = ne_10m_urban_areas)
urbanareasin <- readOGR(dsn=path.expand("./ne_10m_urban_areas.shp"), layer = "ne_10m_urban_areas")
urbanareasin <- readOGR(dsn=path.expand("./ne_10m_urban_areas"), layer = "ne_10m_urban_areas")
urbanareasin <- readOGR(dsn=path.expand("./"), layer = "ne_10m_urban_areas")
urbanareasin <- readOGR(dsn="./ne_10m_urban_areas.shp")
urbanareasin <- readOGR(dsn="./ne_10m_urban_areas.shp")
urbanareasin <- readOGR(dsn=path.expand("./"), layer = "ne_10m_urban_areas")
urbanareasin <- readOGR(dsn=path.expand("./ne_10m_urban_areas/"), layer = "ne_10m_urban_areas")
pwd
cwd
ls()
urbanareasin <- readOGR("./ne_10m_urban_areas/ne_10m_urban_areas.shp"))
urbanareasin <- readOGR("./ne_10m_urban_areas/ne_10m_urban_areas.shp")
urb <- c(geom_polygon(aes(long, lat, group = group),
size = 0.3,
color = "#ffffff",
fill = "#ffffff",
alpha = 1,
data = urbanareasin))
tapply(data, c(data$OriginCityState, data$DestinationCityState), n)
tapply(data$Satisfaction, c(data$OriginCityState, data$DestinationCityState), n)
tapply(data$Satisfaction, list(data$OriginCityState, data$DestinationCityState), n)
data %>%
group_by(OriginCityState, DestinationCityState)
data %>%
group_by(OriginCityState, DestinationCityState) %>%
summarise(
count = n()
)
dat_grp <- data %>%
group_by(OriginCityState, DestinationCityState) %>%
summarise(
count = n(Satisfaction)
)
data %>%
group_by(OriginCityState, DestinationCityState) %>%
summarise(
n = n()
)
data %>%
group_by(OriginCityState, DestinationCityState)
dat_grp <- data %>%
group_by(OriginCityState, DestinationCityState) %>%
summarise(
count = n()
)
data %>%
dplyr::group_by(OriginCityState, DestinationCityState) %>%
dplyr::summarise(
count = dplyr::n()
)
dat_grp <- data %>%
dplyr::group_by(OriginCityState, DestinationCityState) %>%
dplyr::summarise(
count = dplyr::n()
)
sum(data_grp$count)
sum(dat_grp$count)
head(dat_grp)
OriginLatLon <- read.csv("./OrigLatLon.csv")
DestLatLon <- read.csv("./DestLatLon.csv")
dat_grp <- merge(dat_grp, OriginLatLon, by.x="OriginCityState", by.y="unqOrigins", all.x=TRUE)
head(dat_grp)
dat_grp <- merge(dat_grp, DestLatLon, by.x="DestinationCityState", by.y="unqDests", all.x=TRUE)
head(dat_grp)
dat_grp = subset(dat_grp, select=-c(`X.x`, `X.y`))
head(dat_grp)
# calculate routes for each row
routes = gcIntermediate(data_grp[,c('Orig_lon', 'Orig_lat')], dat_grp[,c('Dest_lon', 'Dest_lat')], 200, breakAtDateLine = FALSE, addStartEnd = TRUE, sp=TRUE)
# calculate routes for each row
routes = gcIntermediate(dat_grp[,c('Orig_lon', 'Orig_lat')], dat_grp[,c('Dest_lon', 'Dest_lat')], 200, breakAtDateLine = FALSE, addStartEnd = TRUE, sp=TRUE)
# fortify to dataframe
fortifiedroutes <- fortify.SpatialLinesDataFrame(routes)
View(routes)
urb <- c(geom_polygon(aes(long, lat, group = group),
size = 0.3,
color = "#ffffff",
fill = "#ffffff",
alpha = 1,
data = urbanareasin))
# get US map
worldmap <- map_data("world")
rm(usmap)
View(fortifiedroutes)
routes_count = data.frame('count'=dat_grp$count, 'id'=1:nrow(dat_grp), 'Location':dat_grp$OriginCityState)
sapply(dat_grp, function(x) sum(is.na(a)))
sapply(dat_grp, function(x) sum(is.na(x)))
routes_count = data.frame('count'=dat_grp$count, 'id'=1:nrow(dat_grp), 'Location':dat_grp$OriginCityState)
routes_count <- data.frame('count'=dat_grp$count, 'id'=1:nrow(dat_grp), 'Location'=dat_grp$OriginCityState)
View(routes_count)
greatcircles <- merge(fortifiedroutes, routes_count, all.x=T, by='id')
# get US map
worldmap <- map_data("world")
c(geom_polygon(aes(long,lat,group=group), size = 0.1, colour= "#090D2A",
fill="#090D2A", alpha=0.8, data=worldmap))
wrld <- c(geom_polygon(aes(long,lat,group=group), size = 0.1, colour= "#090D2A",
fill="#090D2A", alpha=0.8, data=worldmap))
ggplot() +
wrld +
urb +
geom_line(aes(long,lat,group=id, color=Location), alpha = 0.3, size=0.01, data= greatcircles) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = c(0,0.4),
legend.justification = c(0,1),
legend.background = element_rect(colour = NA, fill = NA),
legend.key = element_rect(colour = NA, fill = NA, size = 10),
legend.text = element_text(colour='white', size = 20))
ggplot() +
wrld +
urb +
geom_line(aes(long,lat,group=id, color=Location), alpha = 0.3, size=0.01, data= greatcircles) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot() +
wrld +
urb +
geom_line(aes(long,lat,group=id, color=Location), alpha = 0.3, size=0.01, data= greatcircles) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = "none")
ggplot() +
wrld +
urb +
geom_line(aes(long,lat,group=id, color=Location), alpha = 0.3, size=0.01, data= greatcircles) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = "none",
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
flightmap <- ggplot() +
wrld +
urb +
geom_line(aes(long,lat,group=id, color=Location), alpha = 0.3, size=0.01, data= greatcircles) +
theme(panel.background = element_rect(fill='#00001C',colour='#00001C'), panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(legend.position = "none",
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggsave("./images/flightmap.png")
# Check that the count matches the total
sum(dat_grp$count) = nrow(data)
# Check that the count matches the total
sum(dat_grp$count) == nrow(data)
library(tidyverse)
library(readxl)
# read the data file in as a dataframe
data <- read_xlsx("./data/Satisfaction Survey(2).xlsx")
# Find the amount of null values in each column
sapply(data, function(x) sum(is.na(x)))
# Find the amount of null values in each column using dplyr
data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.)))) %>%
transpose()
# Find the amount of null values in each column using dplyr
nulls <- data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.)))) %>%
transpose()
# Find the amount of null values in each column using dplyr
nulls <- data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.)))) %>%
transpose() %>%
data.frame(unlist())
# Find the amount of null values in each column using dplyr
nulls <- data %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.)))) %>%
transpose()
data.frame(unlist(nulls)
)
data.frame(unlist(nulls))
nulls <- data.frame(unlist(nulls))
nulls
nulls[isna(nulls$unlist.nulls.)]
nulls[(nulls$unlist.nulls.)]
nulls[(nulls$unlist.nulls.),]
nulls[nulls$unlist.nulls. != 0,]
# Check on the nulls in the satisfaction column
data &>&
filter(is.na(Satisfaaction))
data %>%
count(Satisfaction)
# Check on the nulls in the satisfaction column
data &>&
filter(Satisfaction == NA)
# Check on the nulls in the satisfaction column
data &>&
filter(!is.na(Satisfaction))
data %>%
ilter(!is.na(Satisfaction))
data %>%
filter(!is.na(Satisfaction))
# Check on the nulls in the satisfaction column
data %>%
filter(is.na(Satisfaction))
# Check on the nulls in the satisfaction column
nullSats <- data %>%
filter(is.na(Satisfaction))
View(nulls)
View(nullSats)
data %>%
filter(is.na(`Arrival Delay in Minutes`))
nullArrivalDelay <- data %>%
filter(is.na(`Arrival Delay in Minutes`))
View(nullArrivalDelay)
nullArrivalDelay %>%
filter(`Flight cancelled` == 'Yes') %>%
sum()
data %>%
filter(!is.na(Satisfaction)) %>%
geom_histogram(mapping = aes(x=Satisfaction))
data %>%
filter(!is.na(Satisfaction)) %>%
geom_histogram(mapping = aes(x=Satisfaction))
data %>%
filter(!is.na(Satisfaction)) %>%
geom_bar(mapping = aes(x=Satisfaction))
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot() +
geom_bar(mapping = aes(x=Satisfaction))
ggplot() +
geom_boxplot(mapping = aes(x=Satisfaction))
ggplot() +
geom_bar(mapping = aes(x=Satisfaction))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction) %>%
ggplot() +
geom_bar(mapping = aes(x=Satisfaction))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction)
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction) %>%
ggplot() +
geom_bar(mapping = aes(x=n))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction) %>%
ggplot() +
geom_bar(mapping = aes(x=Satisfaction, y = n))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction) %>%
ggplot() +
geom_boxplot(mapping = aes(x=Satisfaction, y = n))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction) %>%
ggplot() +
geom_bar(mapping = aes(x=n))
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot() +
geom_bar(mapping = aes(x=Satisfaction))
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_number(Satisfaction, c)))
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_number(Satisfaction, 8)))
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_width(Satisfaction, .5)))
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_width(Satisfaction, .5)))
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_width(Satisfaction, 0.5)))
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_number(Satisfaction, 8)))
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_width(Satisfaction, 0.5)))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction) %>%
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_bar(mapping = aes(group = cut_width(Satisfaction, 0.5)))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction) %>%
ggplot(mapping = aes(x=Satisfaction, y = n)) +
geom_boxplot(mapping = aes(group = cut_width(Satisfaction, 0.5)))
data %>%
filter(!is.na(Satisfaction)) %>%
count(Satisfaction)
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot(mapping = aes(x=Satisfaction)) +
geom_bar()
data %>%
filter(!is.na(Satisfaction)) %>%
filter(Satisfaction %in% c(2.5, 3.5)) %>%
ggplot(mapping = aes(x=Satisfaction)) +
geom_bar()
data %>%
filter(!is.na(Satisfaction)) %>%
filter(Satisfaction %in% c(2.5, 3.5, 4.5)) %>%
ggplot(mapping = aes(x=Satisfaction)) +
geom_bar()
# Create a bar chart to show the counts of each Satisfaction
data %>%
filter(!is.na(Satisfaction)) %>%
ggplot(mapping = aes(x=Satisfaction)) +
geom_bar()
nullArrivalDelay %>%
filter(`Flight cancelled` == 'Yes') %>%
summarize(`Flight cancelled` = sum())
nullArrivalDelay %>%
filter(`Flight cancelled` == 'Yes')
sum(nullArrivalDelay$`Flight cancelled` == "Yes")
sum(nullArrivalDelay$`Flight cancelled` == "No")
